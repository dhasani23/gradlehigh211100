/*
 * Build file for Product Catalog Module
 * 
 * This module provides comprehensive product catalog management functionality including:
 * - Product lifecycle management (creation, updates, categorization, deletion)
 * - Advanced search capabilities using Elasticsearch
 * - Product variant management (size, color, style)
 * - Inventory tracking with low-stock alerts
 * - Product image management
 * - Support for complex product relationships and cross-selling recommendations
 */

plugins {
    id 'java'
    id 'org.springframework.boot' version '1.5.22.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

group = 'com.gradlehigh211100'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    // For any custom repositories if needed
    // maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter:1.5.22.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:1.5.22.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:1.5.22.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-cache:1.5.22.RELEASE'
    
    // Elasticsearch for advanced search capabilities
    implementation 'org.elasticsearch:elasticsearch:6.4.3'
    implementation 'org.springframework.data:spring-data-elasticsearch:3.1.18.RELEASE'
    
    // Redis for caching
    implementation 'redis.clients:jedis:2.9.0'
    
    // Image processing library
    implementation 'com.example:image-processing:1.0.0'
    
    // Database drivers
    runtimeOnly 'com.h2database:h2:1.4.197'
    runtimeOnly 'org.postgresql:postgresql:42.2.5'
    
    // Micronaut dependencies (as specified in requirements)
    implementation 'io.micronaut:micronaut-core:1.3.7'
    implementation 'io.micronaut:micronaut-http-client:1.3.7'
    
    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
}

test {
    useJUnitPlatform()
}

bootRun {
    // Configure the main class if needed
    // mainClass = 'com.gradlehigh211100.productcatalog.ProductCatalogApplication'
    
    // Set JVM arguments if needed
    jvmArgs = ['-Xmx1g', '-Xms512m']
}

jar {
    enabled = true
    archiveClassifier = ''
}

// Task for generating test data
task generateTestData(type: JavaExec) {
    main = "com.gradlehigh211100.productcatalog.util.TestDataGenerator"
    classpath = sourceSets.main.runtimeClasspath
    description = "Generates test product catalog data"
}

// Task for indexing products in Elasticsearch
task indexProducts(type: JavaExec) {
    main = "com.gradlehigh211100.productcatalog.util.ProductIndexer"
    classpath = sourceSets.main.runtimeClasspath
    description = "Indexes all products in Elasticsearch"
}

// Configure logging
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation"]
}

// FIXME: Verify compatibility between Spring Boot 1.5.22 and Elasticsearch 6.4.3
// TODO: Add appropriate Micronaut integration configurations
// TODO: Configure connection pool settings for PostgreSQL