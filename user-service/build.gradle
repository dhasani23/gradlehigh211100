/*
 * User Service Module
 * 
 * This module provides comprehensive user management functionality including:
 * - User registration and authentication
 * - Role-based authorization
 * - User profile management
 * - User preferences
 * - Audit logging for user activities
 */

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.gradlehigh211100'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Spring Boot Core
    compile('org.springframework.boot:spring-boot-starter:1.5.22.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-web:1.5.22.RELEASE')
    
    // Spring Security
    compile('org.springframework.boot:spring-boot-starter-security:1.5.22.RELEASE')
    compile('org.springframework.security:spring-security-jwt:1.0.9.RELEASE')
    
    // Database and JPA
    compile('org.springframework.boot:spring-boot-starter-data-jpa:1.5.22.RELEASE')
    compile('com.h2database:h2:1.4.197')
    compile('org.postgresql:postgresql:42.2.5')
    
    // Validation
    compile('javax.validation:validation-api:2.0.1.Final')
    
    // Password Encryption
    compile('at.favre.lib:bcrypt:0.4')
    
    // Micronaut (for specific microservice features)
    compile('io.micronaut:micronaut-core:1.3.7')
    compile('io.micronaut:micronaut-http-client:1.3.7')
    compile('io.micronaut:micronaut-http-server-netty:1.3.7')
    
    // Testing
    testCompile('org.springframework.boot:spring-boot-starter-test:1.5.22.RELEASE')
    testCompile('org.springframework.security:spring-security-test:4.2.11.RELEASE')
    testCompile('io.micronaut.test:micronaut-test-junit5:1.1.5')
}

// Tasks configuration
bootRun {
    systemProperties = System.properties
}

test {
    useJUnitPlatform()
}

// JAR configuration
jar {
    baseName = 'user-service'
    version = version
}

// Configure the Spring Boot plugin
springBoot {
    executable = true
}

// Task for generating entity classes
task generateEntityModels(type: JavaExec) {
    description = 'Generates JPA entity models from database'
    group = 'build'
    main = 'com.gradlehigh211100.tools.EntityGenerator'
    classpath = sourceSets.main.runtimeClasspath
    
    // Add any required arguments
    args = []
    
    // TODO: Configure entity generator with proper database connection
}

// Task to check code quality
task checkCodeQuality(type: JavaExec) {
    description = 'Run code quality checks'
    group = 'verification'
    
    main = 'com.gradlehigh211100.tools.CodeQualityChecker'
    classpath = sourceSets.main.runtimeClasspath
    
    // FIXME: Configure proper rules for code quality checks
}

// Task for running database migrations
task migrateDatabase(dependsOn: classes, type: JavaExec) {
    description = 'Run database migrations'
    group = 'database'
    
    main = 'com.gradlehigh211100.tools.DatabaseMigrator'
    classpath = sourceSets.main.runtimeClasspath
    
    // Add any required arguments
    args = []
}